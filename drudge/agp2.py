"""
Drudge for reduced AGP - PBCS Hamiltonian.
"""

import collections
import functools
import operator

from sympy import Integer, Symbol, IndexedBase, KroneckerDelta

from drudge import Tensor
from drudge.fock import PartHoleDrudge, SpinOneHalfPartHoleDrudge
# from drudge.su2 import SU2LatticeDrudge
from drudge.utils import sympy_key
from drudge.genquad import GenQuadDrudge
from drudge.term import Vec, Range, Term


# class ProjectedBCSDrudge(SU2LatticeDrudge):
class ProjectedBCSDrudge(GenQuadDrudge):
    r"""Drudge for projected BCS approach in pairing Hamiltonian.

    The reduced BCS drudge contains utilities for solving problems around the
    reduced BCS Hamiltonian, or pairing Hamiltonian.  In this problem, we have
    an :math:`\mathfrak{su}(2)`-like algebra generated by subscriptable
    generators :math:`N`, :math:`P`, and :math:`P^\dag`, which satisfies the
    commutations rules

    .. math::

        [N_p, P_q^\dag] & = 2 \delta_{pq} P_q^\dag \\
        [N_p, P_q] &= -2 \delta_{pq} P_q \\
        [P_p, P_q^\dag] &= \delta_{pq} \left( 1 - N_p \right) \\

    where the symbols :math:`p` and :math:`q` can be over two disjoint ranges,
    the particle range and the hole range.  The usage of these two ranges, as
    well as their default symbols, are exactly the same as those in the
    :py:class:`PartHoleDrudge`.

    In addition to the commutation rules, this drudge also has a Hamiltonian
    stored as ``ham`` attribute, which reads

    .. math::

        \epsilon_p N_p + G_{p, q} P^\dag_p P_q

    where :math:`p` and :math:`q` are summed over the two ranges.

    """

    DEFAULT_CARTAN = Vec('N')
    DEFAULT_RAISE = Vec(r'D^\dagger')
    DEFAULT_LOWER = Vec('D')

    def __init__(
            self, ctx,
            part_range=Range('V', 0, Symbol('nv')),
            part_dumms=PartHoleDrudge.DEFAULT_PART_DUMMS,
            hole_range=Range('O', 0, Symbol('no')),
            hole_dumms=PartHoleDrudge.DEFAULT_HOLE_DUMMS,
            all_orb_dumms=PartHoleDrudge.DEFAULT_ORB_DUMMS,
            upar=IndexedBase('u'), vpar=IndexedBase('v'),
            energies=IndexedBase('epsilon'), interact=IndexedBase('G'),
            cartan=DEFAULT_CARTAN, raise_=DEFAULT_RAISE, lower=DEFAULT_LOWER,
            root=Integer(2), norm=Integer(1), shift=Integer(-1),
            **kwargs
    ):
        """Initialize the drudge object."""

        # Initialize the base su2 problem.
        super().__init__(ctx, **kwargs)
        #    ctx, cartan=cartan, raise_=raise_, lower=lower, root=root,
        #    norm=norm, shift=shift, **kwargs
        # )

        # Set the range and dummies.
        self.part_range = part_range
        self.hole_range = hole_range
        self.set_dumms(part_range, part_dumms)
        self.set_dumms(hole_range, hole_dumms)
        self.add_resolver_for_dumms()

        self.all_orb_dumms = tuple(all_orb_dumms)
        self.set_name(*self.all_orb_dumms)
        self.add_resolver({
            i: (self.part_range, self.hole_range) for i in all_orb_dumms
        })

        # Make additional name definition for the operators.
        self.set_name(**{
            cartan.label[0]+'_':cartan,
            raise_.label[0]+'_p':raise_,
            lower.label[0]+'_m':lower
        })

        self.set_name(cartan, lower, Ddag=raise_)
        spec = _AGPSpec(
                cartan=cartan,raise_=raise_,lower=lower,
                upar=upar,vpar=vpar
        )
        self._spec = spec

        self._swapper = functools.partial(_swap_agp, spec=spec)

        # Define the Hamiltonian.
        # gen_idx, gen_idx2 = self.all_orb_dumms[:2]
        # ham = self.einst(
        #     energies[gen_idx] * cartan[gen_idx] +
        #     interact[gen_idx, gen_idx2] * raise_[gen_idx] * lower[gen_idx2]
        # )
        # self.ham = ham.simplify()

        # Set additional tensor methods.
        # self.set_tensor_method('eval_vev', self.eval_vev)

    @property
    #def swapper(self) -> SU2LatticeDrudge.Swapper:
    def swapper(self) -> GenQuadDrudge.Swapper:
        """Swapper for the new AGP Algebra."""
        return self._swapper


    #
    # Additional customization of the simplification
    #

    # def normal_order(self, terms, **kwargs):
    #     """Take the operators into normal order.

    #     Here, in addition to the common normal-ordering operation, we remove any
    #     term with a cartan operator followed by an lowering operator with the
    #     same index, and any term with a raising operator followed by a cartan
    #     operator with the same index.

    #     """

    #     noed = super().normal_order(terms, **kwargs)
    #     return noed.filter(functools.partial(
    #         _nonzero_by_cartan,
    #         raise_=self.raise_, cartan=self.cartan, lower=self.lower
    #     ))

    #
    # Vacuum expectation value
    #

# def _nonzero_by_cartan(term: Term, raise_, cartan, lower):
#     """If the term is zero because of the cartan in it."""
# 
#     raise_indices = set()
#     cartan_indices = set()
# 
#     for vec in term.vecs:
#         base = vec.base
#         indices = vec.indices
# 
#         if base == raise_:
#             raise_indices.add(indices)
#         elif base == cartan:
#             if indices in raise_indices:
#                 return False
#             cartan_indices.add(indices)
#         elif base == lower:
#             if indices in cartan_indices:
#                 return False
# 
#         continue
# 
#     return True

_AGPSpec = collections.namedtuple('_AGPSpec',[
    'cartan',
    'raise_',
    'lower',
    'upar',
    'vpar'
])


def _swap_agp(vec1: Vec, vec2: Vec, depth=None, *,spec: _AGPSpec):
    """Swap two vectors based on the AGP operators commutation rules
    Here, we introduce an additional input parameter 'depth' which is never
    specified by the user. Rather, it is put to make use os the anti-symmetric 
    nature of the commutation relations and make the function def compact. 
    """
    if depth is None:
        depth = 1
    
    char1, indice1, key1 = _parse_vec(vec1,spec)
    char2, indice2, key2 = _parse_vec(vec2,spec)
    
    # if len(indice1) != len(indice2):
    #     raise ValueError(
    #         'Invalild AGP generators on lattice', (vec1, vec2),
    #         'Incompatible number of lattice indices'
    #     )
    isCartan1 = (char1==1) and (len(indice1)==1)
    isCartan2 = (char2==1) and (len(indice2)==1)

    notCartan1 = (char1!=1) and (len(indice1)==2)
    notCartan2 = (char2!=1) and (len(indice2)==2)

    if not((isCartan1 or notCartan1) and (isCartan2 or notCartan2)):
        raise ValueError(
            'Invalid AGP generators on lattice', (vec1, vec2),
            'Inappropriate rank of indices with the input operator'
        )

    # delta = functools.reduce(operator.mul, (
    #     KroneckerDelta(i,j) for i,j in zip(indice1,indice2)
    # ), _UNITY)

    vpar = spec.vpar
    upar = spec.upar
    
    if char1 == _RAISE:
    
        return None
    
    elif char1 == _CARTAN:

        r = indice1[0]

        if char2 == _RAISE:
            p = indice2[0]
            q = indice2[1]
            del_rq = KroneckerDelta(r,q)
            del_rp = KroneckerDelta(r,p)
            expr1 = (del_rq*(1-del_rp))*(
                    ( (vpar[r]*upar[p])**2 + (vpar[p]*upar[r])**2 )*spec.raise_[r,p]
                    + 2*vpar[r]*vpar[p]*upar[r]*upar[p]*spec.lower[r,p]
            )/( vpar[r]**2 - vpar[p]**2 )
            expr2 = (del_rp*(1-del_rq))*(
                    ( (vpar[r]*upar[q])**2 + (vpar[q]*upar[r])**2 )*spec.raise_[r,q]
                    + 2*vpar[r]*vpar[q]*upar[r]*upar[q]*spec.lower[r,q]
            )/( vpar[r]**2 - vpar[q]**2 )

            return _UNITY, expr1 - expr2
        
        else:

            return None

    elif char1 == _LOWER:

        p = indice1[0]
        q = indice1[1]

        if char2 == _RAISE:
            r = indice2[0]
            s = indice2[1]
            def D_Ddag_comm_expr(a,b,c,d):
                del_ac = KroneckerDelta(a,c)
                del_bd = KroneckerDelta(b,d)
                exprn = del_bd*(1-del_ac)*( (upar[c]*vpar[c])*(
                    (vpar[a]*upar[b])**2 - (vpar[b]*upar[a])**2 )*self.lower[a,c] +
                    (vpar[a]*upar[a])*(
                        (vpar[c]*upar[b])**2 - (vpar[b]*upar[c])**2)*(
                            self.raise_[a,c]
                        )
                    ) 
                return exprn
            expr1 = ((vpar[p]*upar[q])**2 - (vpar[q]*upar[p])**2)*(
                del_pr*del_qs - del_qr*del_ps)*(spec.cartan[p] - spec.cartan[q])
            # expr2 = del_qs*(1-del_pr)*( (upar[r]*vpar[r])*(
            #     (vpar[p]*upar[q])**2 - (vpar[q]*upar[p])**2 )*self.lower[p,r] +
            #     (vpar[p]*upar[p])*( (vpar[r]*upar[q])**2 - (vpar[q]*upar[r])**2)*(
            #         self.raise_[p,r]) )
            expr2 = D_Ddag_comm_expr(p,q,r,s)
            expr3 = D_Ddag_comm_expr(q,p,s,r)
            expr4 = -D_Ddag_comm_expr(p,q,s,r)
            expr5 = -D_Ddag_comm_expr(q,p,r,s)

            tot_comm = expr1 + expr2 + expr3 + expr4

            return _UNITY, tot_comm

        elif char2 == _CARTAN:
            r = indice2[0]
            del_rp = KroneckerDelta(r,p)
            del_rq = KroneckerDelta(r,q)
            # expr1 = (del_rq*(1-del_rp))*(
            #         ( (vpar[r]*upar[p])**2 + (vpar[p]*upar[r])**2 )*spec.lower[r,p]
            #         + 2*vpar[r]*vpar[p]*upar[r]*upar[p]*spec.raise_[r,p]
            # )/( vpar[r]**2 - vpar[p]**2 )
            # expr2 = (del_rp*(1-del_rq))*(
            #         ( (vpar[r]*upar[q])**2 + (vpar[q]*upar[r])**2 )*spec.lower[r,q]
            #         + 2*vpar[r]*vpar[q]*upar[r]*upar[q]*spec.raise_[r,q]
            # )/( vpar[r]**2 - vpar[q]**2 )
            expr1 = (del_rq*(1-del_rp)*(1 + vpar[r]**2 - vpar[p]**2 ))*(
                    ( (vpar[r]*upar[p])**2 + (vpar[p]*upar[r])**2 )*spec.lower[r,p]
                    + 2*vpar[r]*vpar[p]*upar[r]*upar[p]*spec.raise_[r,p]
            )

            
            return _UNITY, expr1 #- expr2

        else:

            return None

    else:
        assert False


_RAISE = 0
_CARTAN = 1
_LOWER = 2

_UNITY = 1

def _parse_vec(vec, spec: _AGPSpec):
    """Get the character, lattice indices, and the indices of keys of vector.
    """
    base = vec.base
    if base == spec.cartan:
        char = _CARTAN
    elif base == spec.raise_:
        char = _RAISE
    elif base == spec.lower:
        char = _LOWER
    else:
        raise ValueError('Unexpected vector for the AGP algebra',vec)
    
    indices = vec.indices
    keys = tuple(sympy_key(i) for i in indices)

    return char, indices, keys
