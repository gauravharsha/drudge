"""
Drudge for reduced BCS Hamiltonian.
"""

import functools

from sympy import Integer, Symbol, IndexedBase

from .drudge import Tensor
from .fock import PartHoleDrudge, SpinOneHalfPartHoleDrudge
from .su2 import SU2LatticeDrudge
from .term import Vec, Range, Term


class ReducedBCSDrudge(SU2LatticeDrudge):
    r"""Drudge for reduced BCS (pairing) Hamiltonian.

    The reduced BCS drudge contains utilities for solving problems around the
    reduced BCS Hamiltonian, or pairing Hamiltonian.  In this problem, we have
    an :math:`\mathfrak{su}(2)`-like algebra generated by subscriptable
    generators :math:`N`, :math:`P`, and :math:`P^\dag`, which satisfies the
    commutations rules

    .. math::

        [N_p, P_q^\dag] & = 2 \delta_{pq} P_q^\dag \\
        [N_p, P_q] &= -2 \delta_{pq} P_q \\
        [P_p, P_q^\dag] &= \delta_{pq} \left( 1 - N_p \right) \\

    where the symbols :math:`p` and :math:`q` can be over two disjoint ranges,
    the particle range and the hole range.  The usage of these two ranges, as
    well as their default symbols, are exactly the same as those in the
    :py:class:`PartHoleDrudge`.

    In addition to the commutation rules, this drudge also has a Hamiltonian
    stored as ``ham`` attribute, which reads

    .. math::

        \epsilon_p N_p + G_{p, q} P^\dag_p P_q

    where :math:`p` and :math:`q` are summed over the two ranges.

    """

    DEFAULT_CARTAN = Vec('N')
    DEFAULT_RAISE = Vec(r'P^\dagger')
    DEFAULT_LOWER = Vec('P')

    def __init__(
            self, ctx,
            part_range=Range('V', 0, Symbol('nv')),
            part_dumms=PartHoleDrudge.DEFAULT_PART_DUMMS,
            hole_range=Range('O', 0, Symbol('no')),
            hole_dumms=PartHoleDrudge.DEFAULT_HOLE_DUMMS,
            all_orb_dumms=PartHoleDrudge.DEFAULT_ORB_DUMMS,
            energies=IndexedBase('epsilon'), interact=IndexedBase('G'),
            cartan=DEFAULT_CARTAN, raise_=DEFAULT_RAISE, lower=DEFAULT_LOWER,
            root=Integer(2), norm=Integer(1), shift=Integer(-1),
            **kwargs
    ):
        """Initialize the drudge object."""

        # Initialize the base su2 problem.
        super().__init__(
            ctx, cartan=cartan, raise_=raise_, lower=lower, root=root,
            norm=norm, shift=shift, **kwargs
        )

        # Set the range and dummies.
        self.part_range = part_range
        self.hole_range = hole_range
        self.set_dumms(part_range, part_dumms)
        self.set_dumms(hole_range, hole_dumms)
        self.add_resolver_for_dumms()

        self.all_orb_dumms = tuple(all_orb_dumms)
        self.set_name(*self.all_orb_dumms)
        self.add_resolver({
            i: (self.part_range, self.hole_range) for i in all_orb_dumms
        })

        # Make additional name definition for the operators.
        self.set_name(cartan, lower, Pdag=raise_)

        # Create the underlying particle-hole drudge with spin.  Note that this
        # drudge is only use internally for VEV evaluation.
        ph_dr = SpinOneHalfPartHoleDrudge(
            ctx, part_orb=(part_range, part_dumms),
            hole_orb=(hole_range, hole_dumms)
        )
        self._ph_dr = ph_dr

        # Translation from su2 generator to the actual fermion operators.
        cr = ph_dr.cr
        an = ph_dr.an
        up, down = ph_dr.spin_vals

        gen_idx, gen_idx2 = self.all_orb_dumms[:2]
        cartan_def = self.define(
            cartan, gen_idx,
            cr[gen_idx, up] * an[gen_idx, up] +
            cr[gen_idx, down] * an[gen_idx, down]
        )
        raise_def = self.define(
            raise_, gen_idx, cr[gen_idx, up] * cr[gen_idx, down]
        )
        lower_def = self.define(
            lower, gen_idx, an[gen_idx, down] * an[gen_idx, up]
        )
        self._defs = [
            cartan_def, raise_def, lower_def
        ]

        # Define the Hamiltonian.
        ham = self.einst(
            energies[gen_idx] * cartan[gen_idx] +
            interact[gen_idx, gen_idx2] * raise_[gen_idx] * lower[gen_idx2]
        )
        self.ham = ham.simplify()

        # Set additional tensor methods.
        self.set_tensor_method('eval_vev', self.eval_vev)

    #
    # Additional customization of the simplification
    #

    def normal_order(self, terms, **kwargs):
        """Take the operators into normal order.

        Here, in addition to the common normal-ordering operation, we remove any
        term with a cartan operator followed by an lowering operator with the
        same index, and any term with a raising operator followed by a cartan
        operator with the same index.

        """

        noed = super().normal_order(terms, **kwargs)
        return noed.filter(functools.partial(
            _nonzero_by_cartan,
            raise_=self.raise_, cartan=self.cartan, lower=self.lower
        ))

    #
    # Vacuum expectation value
    #

    def _transl2fermi(self, tensor: Tensor):
        """Translate a tensor object in terms of the fermion operators.

        This is an internally utility.  The resulted tensor has the internal
        fermion drudge object as its owner.
        """
        return Tensor(
            self._ph_dr,
            tensor.subst_all(self._defs).terms
        )

    def eval_vev(self, tensor: Tensor):
        r"""Evaluate the vacuum expectation value.

        The VEV facility works *as if* we do substitution

        .. math::

            P_p &= c_{p \downarrow} c_{p \uparrow} \\
            P^\dag_p &= c^\dag_{p \uparrow} c^\dag_{p \downarrow} \\
            N_p &= c^\dag_{p \uparrow} c_{p \uparrow}
                + c^\dag_{p \downarrow} c_{p \downarrow} \\

        for :math:`p` in either particle or hole range and evaluate the
        expectation value with respect to the Fermi vacuum.
        """

        transled = self._transl2fermi(tensor)
        res = self._ph_dr.eval_fermi_vev(transled)
        return Tensor(self, res.terms)


def _nonzero_by_cartan(term: Term, raise_, cartan, lower):
    """If the term is zero because of the cartan in it."""

    raise_indices = set()
    cartan_indices = set()

    for vec in term.vecs:
        base = vec.base
        indices = vec.indices

        if base == raise_:
            raise_indices.add(indices)
        elif base == cartan:
            if indices in raise_indices:
                return False
            cartan_indices.add(indices)
        elif base == lower:
            if indices in cartan_indices:
                return False

        continue

    return True
